@page "/"
@page "/index"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/style.css">
    <title>Pomodoro</title>
</head>

<body>
    <div class="container">       
        <Header/>
        <NavMenu/>
        
        <div class="pomodoro-control">
            <button @onclick="SetToPomodoro">Pomodoro</button>
            <button @onclick="SetToShortBreak">Short Break</button>
            <button @onclick="SetToLongBreak">Long Break</button>
        </div>
        <main>
            <strong>@timeLeft.ToString("mm:ss")</strong>

            @if (modalShow)
            {
                <Modal EventCallBack="StartNewCicle" Title="@title"></Modal>
                modalShow = false;
            }


        </main>
        <div class="pomodoro-start-reset">
            @if (pomodoroSettings == null)
            {
                <span class="custom-message">First all, configure the time for Pomodoro, Short Break and Long Break on Settings. </span>
            }
            else
            {
                <button value="Reset" @onclick="ResetTimer">Reset</button>
                <button @onclick="SetTimer">@(timerHasStarted? "Stop":"Start")</button>
            }           

        </div>
        
        <Footer/>

    </div>
</body>

</html>

@code {
    private PomodoroSettings pomodoroSettings;
    private bool timerHasStarted;
    private static System.Timers.Timer timer;
    private DateTime timeLeft = new DateTime();
    private TimerType timerType;
    private bool modalShow = false;
    private int ciclePomodoro = 0;
    private string title;

    private void StartNewCicle()
    {
        ++ciclePomodoro;
        PomodoroControl();
    }

    protected override async Task OnInitializedAsync()
    {
        var json = await localStorage.GetItemAsync<string>("pomodoroSettings");
        if (json != null) pomodoroSettings = System.Text.Json.JsonSerializer.Deserialize<PomodoroSettings>(json); StateHasChanged();
        timerType = TimerType.Pomodoro;
        SetToPomodoro();
    }

    private void SetToPomodoro()
    {
        timerHasStarted = false;
        timeLeft = new DateTime();
        timerType = TimerType.Pomodoro;
        timeLeft = timeLeft.AddMinutes(pomodoroSettings.PomodoroDuration);
        StateHasChanged();
    }

    private void SetToShortBreak()
    {
        timerHasStarted = false;
        timeLeft = new DateTime();
        timerType = TimerType.ShortBreak;
        timeLeft = timeLeft.AddMinutes(pomodoroSettings.ShortBreak);
        StateHasChanged();
    }

    private void SetToLongBreak()
    {
        timerHasStarted = false;
        timeLeft = new DateTime();
        timerType = TimerType.LongBreak;
        timeLeft = timeLeft.AddMinutes(pomodoroSettings.LongBreak);
        StateHasChanged();
    }

    private void ResetTimer()
    {
        timerHasStarted = false;

        switch (timerType)
        {
            case TimerType.Pomodoro:
                SetToPomodoro();
                break;
            case TimerType.ShortBreak:
                SetToShortBreak();
                break;
            case TimerType.LongBreak:
                SetToLongBreak();
                break;
            default:
                break;
        }
    }

    private void SetTimer()
    {
        if (timerHasStarted)
        {
            timerHasStarted = false;
        }
        else
        {
            if (timer != null)
            {
                timer.Dispose();
            }
            timerHasStarted = true;
            timer = new System.Timers.Timer(1000);
            timer.Elapsed += OnTimeEvent;
            timer.AutoReset = true;
            timer.Enabled = true;
        }
        StateHasChanged();
    }

    private void OnTimeEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (timerHasStarted)
        {
            try
            {
                timeLeft = timeLeft.AddSeconds(-1);
                StateHasChanged();
                if (timeLeft.Minute == 0 && timeLeft.Second == 0)
                {
                    timer.Enabled = false;
                    modalShow = true;
                    StateHasChanged();
                }
            }
            catch (ArgumentOutOfRangeException ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private void PomodoroControl()
    {
        if (ciclePomodoro == 1 || ciclePomodoro == 3)
        {
            title = "Let's go back to work!";
            StartShortBreak();
        }
        if (ciclePomodoro == 2 || ciclePomodoro == 4 || ciclePomodoro == 5)
        {
            StartPomodoro();
            title = "It's time to rest!"; 
        }
        if (ciclePomodoro == 6)
        {
            StartLongBreak();
            title = "Let's go back to work!";
            ciclePomodoro = 0;
        }
    }

    private void StartPomodoro()
    {
        SetToPomodoro();
        SetTimer();
    }

    private void StartShortBreak()
    {
        SetToShortBreak();
        SetTimer();
    }
    private void StartLongBreak()
    {
        SetToLongBreak();
        SetTimer();
    }


}